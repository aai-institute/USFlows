---
__object__: src.usflows.explib.base.ExperimentCollection
name: gaussian_mixture_experiments
experiments:
  - &exp2d
    __object__: src.usflows.explib.hyperopt.HyperoptExperiment
    name: gaussian_mixture_2D
    device: cpu
    scheduler: &scheduler 
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples: &num_hyperopt_samples 1
    gpus_per_trial: &gpus_per_trial 0
    cpus_per_trial: &cpus_per_trial 16
    tuner_params: &tuner_params
      metric: val_loss
      mode: min
    trial_config:
      logging:
        images: false
        "image_shape": [28, 28]
      dataset: &dataset
        class:
          __class__: src.usflows.explib.datasets.DistributionSplit
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0, -1.0], [1.0, 1.0]]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(2)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
          num_train: 10000
          num_val: 2000
          num_test: 2000
      epochs: &epochs 200000
      patience: &patience 5
      batch_size: &batch_size 
        __eval__: tune.choice([32])
      optim_cfg: &optim 
        optimizer:
          __class__: src.usflows.sophia.SophiaG
        params:
          lr: 
            __eval__: 1e-3
          weight_decay: 0.0
      model_cfg:
        type:
          __class__: src.usflows.flows.USFlow
        params:
          soft_training: 
            __eval__: tune.choice([False])
          training_noise_prior:
            __object__: pyro.distributions.Uniform
            low:
              __eval__: 1e-20
            high: 0.01
          prior_scale: 1.0
          coupling_blocks: 
            __eval__: tune.choice([10])
          lu_transform: 1
          householder: 0
          conditioner_cls:
            __class__: pyro.nn.DenseNN
          conditioner_args:
            input_dim: 2
            hidden_dims: [32, 32]
            param_dims: [2]
          in_dims: [2]
          affine_conjugation: true
          nonlinearity:
            __eval__: tune.choice([torch.nn.ReLU()])
          base_distribution:
            __object__: src.usflows.distributions.Normal
            loc:
              __eval__: torch.zeros([2]).to("cpu")
            scale:
              __eval__: torch.tensor(1.0).to("cpu")
            device: cpu
  - __overwrites__: *exp2d
    name: gaussian_mixture_3D
    trial_config:
      dataset:
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0, -1.0, -1.0], [1.0, 1.0, 1.0]]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(3)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
      model_cfg:
        params:
          in_dims: [3]
          conditioner_args:
            input_dim: 3
            hidden_dims: [32, 32]
            param_dims: [3]
          base_distribution:
            __object__: src.usflows.distributions.Normal
            loc:
              __eval__: torch.zeros([3]).to("cpu")
  - __overwrites__: *exp2d
    name: gaussian_mixture_4D
    trial_config:
      dataset:
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0, -1.0, -1.0, -1.0], [1.0, 1.0, 1.0, 1.0]]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(4)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
      model_cfg:
        params:
          in_dims: [4]
          conditioner_args:
            input_dim: 4
            hidden_dims: [32, 32]
            param_dims: [4]
          base_distribution:
            loc:
              __eval__: torch.zeros([4]).to("cpu")
  - __overwrites__: *exp2d
    name: gaussian_mixture_5D
    trial_config:
      dataset:
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0, -1.0, -1.0, -1.0, -1.0], [1.0, 1.0, 1.0, 1.0, 1.0]]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(5)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
      model_cfg:
        params:
          in_dims: [5]
          conditioner_args:
            input_dim: 5
            hidden_dims: [32, 32]
            param_dims: [5]
          base_distribution:
            loc:
              __eval__: torch.zeros([5]).to("cpu")
  - __overwrites__: *exp2d
    name: gaussian_mixture_6D
    trial_config:
      dataset:
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(6)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
      model_cfg:
        params:
          in_dims: [6]
          conditioner_args:
            input_dim: 6
            hidden_dims: [32, 32]
            param_dims: [6]
          base_distribution:
            loc:
              __eval__: torch.zeros([6]).to("cpu")
  - __overwrites__: *exp2d
    name: gaussian_mixture_7D
    trial_config:
      dataset:
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(7)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
      model_cfg:
        params:
          in_dims: [7]
          conditioner_args:
            input_dim: 7
            hidden_dims: [32, 32]
            param_dims: [7]
          base_distribution:
            loc:
              __eval__: torch.zeros([7]).to("cpu")
  - __overwrites__: *exp2d
    name: gaussian_mixture_8D
    trial_config:
      dataset:
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(8)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
      model_cfg:
        params:
          in_dims: [8]
          conditioner_args:
            input_dim: 8
            hidden_dims: [32, 32]
            param_dims: [8]
          base_distribution:
            loc:
              __eval__: torch.zeros([8]).to("cpu")
  - __overwrites__: *exp2d
    name: gaussian_mixture_9D
    trial_config:
      dataset:
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(9)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
      model_cfg:
        params:
          in_dims: [9]
          conditioner_args:
            input_dim: 9
            hidden_dims: [32, 32]
            param_dims: [9]
          base_distribution:
            loc:
              __eval__: torch.zeros([9]).to("cpu")
  - __overwrites__: *exp2d
    name: gaussian_mixture_10D
    trial_config:
      dataset:
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(10)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
      model_cfg:
        params:
          in_dims: [10]
          conditioner_args:
            input_dim: 10
            hidden_dims: [32, 32]
            param_dims: [10]
          base_distribution:
            loc:
              __eval__: torch.zeros([10]).to("cpu")
  - __overwrites__: *exp2d
    name: gaussian_mixture_100D
    trial_config:
      dataset:
        params:
          distribution:
            __object__: src.usflows.distributions.GMM
            loc:
              __eval__: torch.tensor([[-1.0] * 100, [1.0] * 100]) 
            covariance_matrix:
              __eval__: torch.stack([torch.eye(100)] * 2)
            mixture_weights:
              __eval__: torch.tensor([0.5, 0.5])
      model_cfg:
        params:
          in_dims: [100]
          conditioner_args:
            input_dim: 100
            hidden_dims: [32, 32]
            param_dims: [100]
          base_distribution:
            loc:
              __eval__: torch.zeros([100]).to("cpu")