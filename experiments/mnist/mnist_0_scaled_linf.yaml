---
__object__: src.explib.base.ExperimentCollection
name: mnist_ablation
experiments:
  - &exp_nice_lu_radial
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist_nice_lu_laplace
    scheduler: &scheduler 
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples: &num_hyperopt_samples 8
    gpus_per_trial: &gpus_per_trial 0
    cpus_per_trial: &cpus_per_trial 1
    tuner_params: &tuner_params
      metric: val_loss
      mode: min
    trial_config:
      logging:
        images: true
        "image_shape": [10, 10]
      dataset: &dataset
        __object__: src.explib.datasets.MnistSplit
        scale: true
        digit: 0
      epochs: &epochs 200000
      patience: &patience 20
      batch_size: &batch_size 
        __eval__: tune.choice([16, 32, 64])
      optim_cfg: &optim 
        optimizer:
          __class__: torch.optim.Adam 
        params:
          lr: 
            __eval__: tune.loguniform(1e-5, 1e-3)
          weight_decay: 0.0
      
      model_cfg: 
        type:
          __class__: &model src.veriflow.flows.NiceFlow
        params:
          soft_training: true
          training_noise_prior:
            __object__: pyro.distributions.Uniform
            low: 
              __eval__: 1e-30
            high: 0.001
          prior_scale: 5.0
          coupling_layers: &coupling_layers 
            __eval__: tune.choice([5 * i for i in range(1, 7)])
          coupling_nn_layers: &coupling_nn_layers 
            __eval__: "tune.choice([[w] * l for l in [1, 2, 3] for w in [100, 200, 300, 400, 500]])" # tune.choice([[c*32, c*16, c*8, c*16, c*32] for c in [1, 2, 3, 4]] + [[c*64, c*32, c*64]  for c in range(1,5)] + [[c*128] * 2 for c in range(1,5)] + [[c*256] for c in range(1,5)])
          nonlinearity: &nonlinearity 
            __eval__: tune.choice([torch.nn.ReLU()])
          split_dim: 
            __eval__: tune.choice([i for i in range(50, 393)])
          base_distribution: 
            __object__: src.veriflow.distributions.RadialDistribution       
            p:
              __eval__: math.inf
            loc: 
              __eval__: torch.zeros(100).to("cpu")
            radial_distribution:
              __object__: pyro.distributions.LogNormal
              loc: 
                __eval__: torch.zeros(1).to("cpu")
              scale: 
                __eval__: (.5 * torch.ones(1)).to("cpu")
          use_lu: true
  - __overwrites__: *exp_nice_lu_radial
    name: mnist_nice_lu_normal
    trial_config:
      model_cfg: 
          params:
            base_distribution:
              __exact__: 
                __object__: pyro.distributions.Normal
                loc: 
                  __eval__: torch.zeros(100)
                scale: 
                  __eval__: torch.ones(100)
  - &exp_nice_rand_radial
    __overwrites__: *exp_nice_lu_radial
    name: mnist_nice_rand_radial
    trial_config:
      model_cfg: 
        params:
          use_lu: false
          permutation: random
  - &exp_nice_rand_normal
    __overwrites__: *exp_nice_lu_radial
    name: mnist_nice_rand_normal
    trial_config:
      model_cfg: 
        params:
          use_lu: false
          permutation: random
          base_distribution: 
            __exact__: 
              __object__: pyro.distributions.Normal
              loc: 
                __eval__: torch.zeros(100)
              scale: 
                __eval__: torch.ones(100)