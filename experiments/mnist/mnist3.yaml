__object__: src.explib.base.ExperimentCollection
name: mnist_ablation
experiments:
  - &exp_laplace
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist_3_laplace
    device: &device cpu
    scheduler: &scheduler 
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples: &num_hyperopt_samples 1
    gpus_per_trial: &gpus_per_trial 0
    cpus_per_trial: &cpus_per_trial 1
    tuner_params: &tuner_params
      metric: val_loss
      mode: min
    trial_config:
      device: *device
      logging:
        images: true
        "image_shape": [28, 28]
      dataset: &dataset
        __object__: src.explib.datasets.MnistSplit
        digit: 3
        device: *device
      epochs: &epochs 1
      patience: &patience 20
      batch_size: &batch_size 
        __eval__: tune.choice([128])
      optim_cfg: &optim 
        optimizer:
          __class__: torch.optim.Adam 
        params:
          lr: 
            __eval__: tune.loguniform(1e-5, 1e-2)
          weight_decay: 0.0
      
      model_cfg: 
        type:
          __class__: &model src.veriflow.flows.NiceFlow
        params:
          soft_training: true
          training_noise_prior:
            __object__: pyro.distributions.Uniform
            low: 
              __eval__: 1e-20 * torch.ones(1).to("cpu") #1e-20
            high:  
              __eval__: 0.01 * torch.ones(1).to("cpu") #0.01
          prior_scale: 2.0
          coupling_layers: 
            __eval__: tune.choice([l for l in range(2, 10)])
          coupling_nn_layers: 
            __eval__: tune.choice([[300] * l for l in range(1, 5)])
          nonlinearity: &nonlinearity 
            __eval__: torch.nn.ReLU() #tune.choice([torch.nn.ReLU()])
          split_dim: 392
          base_distribution:
            __object__: pyro.distributions.Laplace
            loc:
              __eval__: torch.zeros(784).to("cpu")
            scale:
              __eval__: torch.ones(784).to("cpu")
          use_lu: true