---
__object__: src.explib.base.ExperimentCollection
name: mnist_ablation
experiments:
  - &exp_nice_lu_laplace
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist_nice_lu_laplace
    scheduler: &scheduler 
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples: &num_hyperopt_samples 20
    gpus_per_trial: &gpus_per_trial 0
    cpus_per_trial: &cpus_per_trial 1
    tuner_params: &tuner_params
      metric: val_loss
      mode: min
    trial_config:
      logging:
        images: true
        "image_shape": [10, 10]
      dataset: &dataset
        __object__: src.explib.datasets.MnistSplit
        digit: 0
        scale: true
      epochs: &epochs 200000
      patience: &patience 50
      batch_size: &batch_size 
        __eval__: tune.choice([32])
      optim_cfg: &optim 
        optimizer:
          __class__: torch.optim.Adam 
        params:
          lr: 
            __eval__: tune.loguniform(1e-5, 1e-3)
          weight_decay: 0.0
      
      model_cfg: 
        type:
          __class__: &model src.veriflow.flows.NiceFlow
        params:
          masktype: alternate
          soft_training: false
          training_noise_prior:
            __object__: pyro.distributions.Laplace
            loc: 0.0
            scale: 0.001
          prior_scale: 1.0
          coupling_layers: &coupling_layers 
            __eval__: tune.choice([3])
          coupling_nn_layers: &coupling_nn_layers 
            __eval__: "tune.choice([[100]])" # tune.choice([[c*32, c*16, c*8, c*16, c*32] for c in [1, 2, 3, 4]] + [[c*64, c*32, c*64]  for c in range(1,5)] + [[c*128] * 2 for c in range(1,5)] + [[c*256] for c in range(1,5)])
          nonlinearity: &nonlinearity 
            __eval__: tune.choice([torch.nn.ReLU()])
          split_dim: 
            __eval__: tune.choice([10 + i for i in range(41)])
          base_distribution: 
            __object__: pyro.distributions.Laplace
            loc: 
              __eval__: torch.zeros(100).to("cpu")
            scale: 
              __eval__: torch.ones(100).to("cpu")
          use_lu: false