---
__object__: src.explib.base.ExperimentCollection
name: mnist_logNormal_linf_medium_better
experiments:
  - &mnist_logNormal_linf_loc_1_scale_05_medium_sized
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist_logNormal_linf_loc_1_scale_05_medium_sized
    scheduler: &scheduler 
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples: &num_hyperopt_samples 8
    gpus_per_trial: &gpus_per_trial 2
    cpus_per_trial: &cpus_per_trial 0
    tuner_params: &tuner_params
      metric: val_loss
      mode: min
    device: &device cuda
    trial_config:
      logging:
        images: true
        "image_shape": [10, 10]
      dataset: &dataset
        __object__: src.explib.datasets.MnistSplit
        scale: true
        digit: 0
        device: *device
      epochs: &epochs 200000
      patience: &patience 40
      batch_size: &batch_size
        __eval__: tune.choice([16, 32, 64])
      optim_cfg: &optim
        optimizer:
          __class__: torch.optim.Adam
        params:
          lr:
            __eval__: tune.loguniform(1e-7, 1e-4)
          weight_decay: 0.0
      model_cfg:
        type:
          __class__: &model src.veriflow.flows.NiceFlow
        params:
          soft_training: true
          training_noise_prior:
            __object__: pyro.distributions.Uniform
            low:
              __eval__: 1e-30 * torch.ones(1).to("cuda") #1e-20
            high:
                __eval__: 0.001 * torch.ones(1).to("cuda") #0.01
          prior_scale: 5.0
          coupling_layers: &coupling_layers
            __eval__: tune.choice([i for i in range(3, 4)])
          coupling_nn_layers: &coupling_nn_layers
            __eval__: "tune.choice([[w] * l for l in [1, 2, 3] for w in [100, 200, 300]])" # tune.choice([[c*32, c*16, c*8, c*16, c*32] for c in [1, 2, 3, 4]] + [[c*64, c*32, c*64]  for c in range(1,5)] + [[c*128] * 2 for c in range(1,5)] + [[c*256] for c in range(1,5)])
          nonlinearity: &nonlinearity
            __eval__: tune.choice([torch.nn.ReLU()])
          split_dim: 50
          base_distribution:
            __object__: src.veriflow.distributions.RadialDistribution
            device: *device
            p:
              __eval__: math.inf
            loc:
              __eval__: torch.zeros(100).to("cuda")
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc:
                __eval__: torch.ones(1).to("cuda")
              scale:
                __eval__: (0.5 * torch.ones(1)).to("cuda")
          use_lu: false
  - &mnist_logNormal_linf_loc_12_scale_05_medium_sized
    __overwrites__: *mnist_logNormal_linf_loc_1_scale_05_medium_sized
    name: mnist_logNormal_linf_loc_12_scale_05_medium_sized
    trial_config:
      model_cfg:
        params:
          base_distribution:
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc:
                __eval__: (1.2 * torch.ones(1)).to("cuda")
              scale:
                __eval__: (0.5 * torch.ones(1)).to("cuda")
  - &mnist_logNormal_linf_loc_08_scale_05_medium_sized
    __overwrites__: *mnist_logNormal_linf_loc_1_scale_05_medium_sized
    name: mnist_logNormal_linf_loc_08_scale_05_medium_sized
    trial_config:
      model_cfg:
        params:
          base_distribution:
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc:
                __eval__: (0.8 * torch.ones(1)).to("cuda")
              scale:
                __eval__: (0.5 * torch.ones(1)).to("cuda")
  - &mnist_logNormal_linf_loc_1_scale_03_medium_sized
    __overwrites__: *mnist_logNormal_linf_loc_1_scale_05_medium_sized
    name: mnist_logNormal_linf_loc_1_scale_03_medium_sized
    trial_config:
      model_cfg:
        params:
          base_distribution:
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc:
                __eval__: (1 * torch.ones(1)).to("cuda")
              scale:
                __eval__: (0.3 * torch.ones(1)).to("cuda")
  - &mnist_logNormal_linf_loc_1_scale_07_medium_sized
    __overwrites__: *mnist_logNormal_linf_loc_1_scale_05_medium_sized
    name: mnist_logNormal_linf_loc_1_scale_07_medium_sized
    trial_config:
      model_cfg:
        params:
          base_distribution:
            norm_distribution:
              __object__: pyro.distributions.LogNormal
              loc:
                __eval__: (1 * torch.ones(1)).to("cuda")
              scale:
                __eval__: (0.7 * torch.ones(1)).to("cuda")