---
__object__: src.explib.base.ExperimentCollection
name: mnist_ablation
experiments:
  - &exp_laplace0
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist0
    scheduler:  
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples:  1
    gpus_per_trial:  0
    cpus_per_trial:  1
    tuner_params: 
      metric: val_loss
      mode: min
    device: cpu
    trial_config:
      epochs:  100000
      patience:  20
      logging:
        images: false
        image_shape: [28, 28]
      dataset:
        class:
          __class__: src.explib.datasets.MnistSplit
        params:
          dataloc: /Users/fariedabuzaid/Projects/veriflow/data
          space_to_depth_factor: 4
          device: cpu 
      batch_size:  
        __eval__: tune.choice([32])
      optim_cfg: 
        optimizer:
          __class__: torch.optim.Adam 
        params:
          lr: 
            __eval__: 1e-4
          weight_decay: 0.0
      model_cfg: 
        type:
          __class__: src.veriflow.flows.USFlow
        params:
          soft_training: false
          training_noise_prior:
            __object__: pyro.distributions.Uniform
            low: 
              __eval__: 1e-20
            high: 0.01
          prior_scale: 1.0
          coupling_blocks: 12
          lu_transform: 1
          householder: 0
          conditioner_cls: 
            __class__: src.veriflow.networks.ConvNet2D
          conditioner_args:
            c_in: 16
            c_hidden: 32
            num_layers: 2
            padding: 1
            dilation: 1
            stride: 1
            kernel_size: 3
            rescale_hidden: 1
            normalize_layers: false
            gating: false
          in_dims: [16, 7, 7]
          affine_conjugation: true
          nonlinearity: 
            __eval__: tune.choice([torch.nn.ReLU()])
          base_distribution: 
            class:
              __class__: src.veriflow.distributions.RadialMM
            params:      
              device: cpu
              p: 2.0
              loc: 
                __eval__: torch.randn([20, 16, 7, 7]).to("cpu") * 0.1
              norm_distribution:
                class:
                  __class__: src.veriflow.distributions.LogNormal
                params:
                  loc: 
                    __eval__: torch.ones([20, 1, 1, 1]).to("cpu") * 1
                  scale:
                    __eval__: torch.ones([20, 1, 1, 1]).to("cpu") * .5
                  n_batch_dims: 1
              mixture_weights:
                __eval__: torch.ones([20]).to("cpu") 