---
__object__: src.explib.base.ExperimentCollection
name: mnist_ablation
experiments:
  - &exp_laplace
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist_full_laplace
    scheduler:  
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples:  50
    gpus_per_trial:  1
    cpus_per_trial:  1
    tuner_params: 
      metric: val_loss
      mode: min
    device: cuda  # Options: [cpu, cuda]
    trial_config:
      logging:
        images: false
        image_shape: [28, 28]
      dataset: 
        __object__: src.explib.datasets.MnistSplit
        space_to_depth_factor: 4
        device: cuda 
      epochs:  200000
      patience:  30
      batch_size:  
        __eval__: tune.choice([256, 512, 1024])
      optim_cfg: 
        optimizer:
          __class__: torch.optim.Adam 
        params:
          lr: 
            __eval__: tune.loguniform(0.00001, 0.01)
          weight_decay: 0.0
      model_cfg: 
        type:
          __class__: src.veriflow.flows.USFlow
        params:
          soft_training: 
            __eval__: tune.choice([True, False])
          in_dims: [16, 7, 7]
          training_noise_prior:
            __object__: pyro.distributions.Uniform
            low: 
              __eval__: 1e-20
            high: 0.05
          prior_scale: 
            __eval__: tune.loguniform(1., 5.)
          coupling_blocks: 
            __eval__: tune.choice([n for n in range(1, 15)])
          lu_transform: 
            __eval__: tune.choice([0, 1, 2])
          householder: 
            __eval__: tune.choice([0, 1])
          affine_conjugation: 
            __eval__: tune.choice([True, False])
          conditioner_cls: 
            __class__: src.veriflow.networks.CondConvNet2D
          conditioner_args:
            c_in: 16
            c_hidden: 
              __eval__: tune.choice([8, 16, 32, 64])
            rescale_hidden: 1
            c_out:  -1
            num_layers:
              __eval__: tune.choice([1, 2, 3, 4, 5, 6])
            nonlinearity: 
              __eval__: torch.nn.ReLU()
            kernel_size: 
              __eval__: tune.choice([3, 4, 5])
            stride:
              __eval__: tune.choice([1])
            dilation: 
              __eval__: tune.choice([1])
            padding: same
            normalize_layers: 
              __eval__: tune.choice([True, False])
          nonlinearity: 
            __eval__: tune.choice([torch.nn.ReLU()])
          base_distribution: 
            __object__: src.veriflow.distributions.Laplace       
            loc: 
              __eval__: torch.zeros(16, 7, 7).to("cuda")
            scale:
              __eval__: torch.ones(16, 7, 7).to("cuda")
            device: cuda
