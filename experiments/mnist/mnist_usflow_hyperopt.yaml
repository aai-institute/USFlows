---
__object__: src.explib.base.ExperimentCollection
name: mnist_ablation
experiments:
  - &exp_laplace
    __object__: src.explib.hyperopt.HyperoptExperiment
    name: mnist_full_laplace
    scheduler:  
      __object__: ray.tune.schedulers.ASHAScheduler
      max_t: 1000000
      grace_period: 1000000
      reduction_factor: 2
    num_hyperopt_samples:  1
    gpus_per_trial:  0
    cpus_per_trial:  1
    tuner_params: 
      metric: val_loss
      mode: min
    device: cpu
    trial_config:
      logging:
        images: false
        image_shape: [28, 28]
      dataset: 
        __object__: src.explib.datasets.MnistSplit
        space_to_depth_factor: 28
        digit: 3
        device: cpu 
      epochs:  200000
      patience:  10
      batch_size:  
        __eval__: tune.choice([32])
      optim_cfg: 
        optimizer:
          __class__: torch.optim.Adam 
        params:
          lr: 
            __eval__: 1e-4
          weight_decay: 0.0
      model_cfg: 
        type:
          __class__: src.veriflow.flows.USFlow
        params:
          soft_training: true
          training_noise_prior:
            __object__: pyro.distributions.Uniform
            low: 
              __eval__: 1e-20
            high: 0.01
          prior_scale: 1.0
          coupling_blocks: 2
          lu_transform: 1
          householder: 0
          affine_conjugation: true
          conditioner_cls: 
            __class__: src.veriflow.networks.CondConvNet
          conditioner_args:
            c_in: 16,
            c_hidden: 
              __eval__: tune.choice([16, 32, 64])
            rescale_hidden: 1,
            c_out:  -1
            num_layers:
              __eval__: tune.choice([2, 3, 4, 5, 6])
            nonlinearity: any = nn.ReLU(),
            kernel_size: 
              __eval__: tune.choice([3, 4, 5])
            stride:
              __eval__: tune.choice([1, 2])
            dilation: 
              __eval__: tune.choice([1, 2])
          nonlinearity: 
            __eval__: tune.choice([torch.nn.ReLU()])
          base_distribution: 
            __object__: src.veriflow.distributions.RadialDistribution       
            device: cuda
            p: 1.0
            loc: 
              __eval__: torch.zeros(16, 7, 7).to("cuda")
            radial_distribution:
              __object__: src.veriflow.LogNormal
              loc: 
                __eval__: torch.zeros(1).to("cuda")
              scale: 
                __eval__: (.5 * torch.ones(1)).to("cuda")
